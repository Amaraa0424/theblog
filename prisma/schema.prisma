// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../app/generated/prisma/pothos.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  name              String?
  password          String
  role              Role        @default(USER)
  posts             Post[]
  comments          Comment[]
  shares            Share[]   
  sharedWithMe      Share[]     @relation("SharedWith")
  likes             Like[]
  sessions          Session[]
  verificationToken VerificationToken?
  resetToken        ResetToken?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Post {
  id            String    @id @default(uuid())
  title         String
  subtitle      String?
  content       String
  image         String?
  published     Boolean   @default(false)
  author        User      @relation(fields: [authorId], references: [id])
  authorId      String
  comments      Comment[]
  views         View[]
  tags          Tag[]
  shares        Share[]
  likes         Like[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Comment {
  id            String    @id @default(uuid())
  content       String
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String
  author        User?     @relation(fields: [authorId], references: [id])
  authorId      String?
  guestName     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Tag {
  id            String    @id @default(uuid())
  name          String    @unique
  posts         Post[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model View {
  id            String    @id @default(uuid())
  post          Post      @relation(fields: [postId], references: [id])
  postId        String
  ipAddress     String
  userAgent     String
  referrer      String?
  timestamp     DateTime  @default(now())
}

model Share {
  id            String    @id @default(uuid())
  post          Post      @relation(fields: [postId], references: [id])
  postId        String
  sharedBy      User      @relation(fields: [sharedById], references: [id])
  sharedById    String
  sharedWith    User      @relation("SharedWith", fields: [sharedWithId], references: [id])
  sharedWithId  String
  createdAt     DateTime  @default(now())
}

model Session {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  token         String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  token         String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
}

model ResetToken {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  token         String    @unique
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
}

model Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

enum Role {
  USER
  ADMIN
}
