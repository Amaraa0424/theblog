generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "../app/generated/prisma/pothos.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String             @id @default(uuid())
  email                String             @unique
  name                 String?
  password             String
  role                 Role               @default(USER)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  avatar               String?
  comments             Comment[]
  CommentLike          CommentLike[]
  likes                Like[]
  loginAttempts        LoginAttempt[]
  posts                Post[]
  PostReadingTime      PostReadingTime[]
  resetToken           ResetToken?
  sessions             Session[]
  shares               Share[]
  sharedWithMe         Share[]            @relation("SharedWith")
  ipAddresses          UserIpAddress[]
  verificationToken    VerificationToken?
  Comment_UserMentions Comment[]          @relation("UserMentions")
}

model Post {
  id              String            @id @default(uuid())
  title           String
  content         String
  published       Boolean           @default(false)
  authorId        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  image           String?
  subtitle        String?
  categoryId      String
  comments        Comment[]
  likes           Like[]
  author          User              @relation(fields: [authorId], references: [id])
  category        Category          @relation(fields: [categoryId], references: [id])
  PostReadingTime PostReadingTime[]
  shares          Share[]
  views           View[]
  tags            Tag[]             @relation("PostToTag")
}

model Comment {
  id                String        @id @default(uuid())
  content           String
  postId            String
  authorId          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  parentId          String?
  author            User          @relation(fields: [authorId], references: [id])
  Comment           Comment?      @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  other_Comment     Comment[]     @relation("CommentToComment")
  post              Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  CommentLike       CommentLike[]
  User_UserMentions User[]        @relation("UserMentions")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]   @relation("PostToTag")
}

model View {
  id        String   @id @default(uuid())
  postId    String
  ipAddress String
  userAgent String
  referrer  String?
  timestamp DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
}

model Share {
  id           String   @id @default(uuid())
  postId       String
  sharedById   String
  sharedWithId String
  createdAt    DateTime @default(now())
  post         Post     @relation(fields: [postId], references: [id])
  sharedBy     User     @relation(fields: [sharedById], references: [id])
  sharedWith   User     @relation("SharedWith", fields: [sharedWithId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model ResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model LoginAttempt {
  id        String   @id @default(uuid())
  userId    String
  ipAddress String
  userAgent String
  referrer  String?
  success   Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model UserIpAddress {
  id         String   @id @default(uuid())
  ipAddress  String
  userAgent  String
  userId     String?
  isGuest    Boolean  @default(false)
  lastSeenAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])

  @@unique([ipAddress, userId])
  @@index([ipAddress])
  @@index([userId])
}

model CommentLike {
  id        String   @id
  commentId String
  userId    String
  createdAt DateTime @default(now())
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId])
}

model PostReadingTime {
  id        String    @id
  postId    String
  userId    String?
  duration  Int
  startTime DateTime  @default(now())
  endTime   DateTime?
  ipAddress String?
  userAgent String?
  Post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User?     @relation(fields: [userId], references: [id])

  @@index([ipAddress])
  @@index([postId])
  @@index([userId])
}

enum Role {
  USER
  ADMIN
}
